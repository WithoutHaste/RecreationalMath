using System;
using System.Linq;
using System.Numerics;

namespace WithoutHaste.Sequences
{
	/// <summary>
	/// A list or category of integer numbers, generated by some rule.
	/// </summary>
	public abstract class Sequence
	{
		/// <summary>
		/// The maximum number that can be in the sequence.
		/// </summary>
		public BigInteger Max { get; protected set; }
		/// <summary>
		/// Returns the full list of numbers, ordered least to greatest.
		/// </summary>
		public abstract BigInteger[] Numbers { get; }
		/// <summary>
		/// List of numbers from other sources to test against.
		/// </summary>
		internal static BigInteger[] TestNumbers;

		public Sequence(BigInteger max)
		{
			Max = max;
			Generate();
		}

		/// <summary>
		/// Generates the full list of numbers.
		/// </summary>
		protected abstract void Generate();

		/// <summary>
		/// Returns an ordered list of the numbers that appear in both sequences.
		/// </summary>
		/// <exception cref='Exception'>Both sequences must have the same Max value.</exception>
		public BigInteger[] Intersect(Sequence other)
		{
			if(this.Max != other.Max)
				throw new Exception("Both sequences must have the same Max value.");
			return this.Numbers.Intersect(other.Numbers).OrderBy(x => x).ToArray();
		}
	}
}
